import os
import gradio as gr
import subprocess
import tempfile
from providers.llm import generate_script_with_llm
from providers.tts import generate_voice
from providers.media import search_or_generate_visual
from utils.subtitles import generate_subtitles
from utils.history import save_history_entry, load_history
from config.settings import Settings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
settings = Settings()
os.makedirs("videos", exist_ok=True)

# –°–æ–∑–¥–∞—ë–º silence.mp3
if not os.path.exists("videos/silence.mp3"):
    import wave
    with wave.open("videos/silence.mp3", "w") as f:
        f.setnchannels(1)
        f.setsampwidth(2)
        f.setframerate(44100)
        f.writeframes(b"\x00\x00" * 44100)

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===

def create_video_pipeline(topic: str, style: str, add_subtitles: bool, progress=gr.Progress()):
    if not topic.strip():
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É!", None

    progress(0.1, desc="–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    script = generate_script_with_llm(topic, style)
    if "–û—à–∏–±–∫–∞" in script:
        return script, None

    progress(0.3, desc="–°–æ–∑–¥–∞—é –∞—É–¥–∏–æ –∏ –≤–∏–∑—É–∞–ª...")
    scenes = parse_script(script)
    if not scenes:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", None

    video_files = []
    for i, scene in enumerate(progress.tqdm(scenes, desc="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ü–µ–Ω—ã")):
        visual_desc = scene.get("visual", "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ñ–æ–Ω")
        voice_text = scene.get("text", "")

        # –ú–µ–¥–∏–∞
        video_file = search_or_generate_visual(visual_desc, duration=5)
        # –ê—É–¥–∏–æ
        audio_file = f"videos/voice_{i}.mp3"
        generate_voice(voice_text, audio_file)

        # –°–∫–ª–µ–π–∫–∞
        temp_video = f"videos/temp_{i}.mp4"
        subprocess.run([
            "ffmpeg", "-y", "-i", video_file, "-i", audio_file,
            "-c:v", "copy", "-c:a", "aac", "-shortest", temp_video
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        video_files.append(temp_video)

    progress(0.8, desc="–°–∫–ª–µ–∏–≤–∞—é –≤–∏–¥–µ–æ...")
    if len(video_files) == 1:
        final_path = f"videos/{topic.replace(' ', '_')}.mp4"
        os.rename(video_files[0], final_path)
    else:
        list_file = "videos/filelist.txt"
        with open(list_file, "w") as f:
            for vf in video_files:
                f.write(f"file '{os.path.abspath(vf)}'\n")
        final_path = f"videos/{topic.replace(' ', '_')}.mp4"
        subprocess.run([
            "ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i", list_file,
            "-c", "copy", final_path
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # –°—É–±—Ç–∏—Ç—Ä—ã
    if add_subtitles and len(video_files) > 0:
        progress(0.9, desc="–î–æ–±–∞–≤–ª—è—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
        audio_file = f"videos/voice_0.mp3"
        final_path = generate_subtitles(audio_file, final_path, final_path)

    # –ò—Å—Ç–æ—Ä–∏—è
    save_history_entry(topic, final_path)

    progress(1.0, desc="–ì–æ—Ç–æ–≤–æ!")
    return "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!", final_path

def parse_script(script: str) -> list:
    scenes = []
    lines = script.split('\n')
    current_scene = {}
    for line in lines:
        line = line.strip()
        if line.startswith("–°—Ü–µ–Ω–∞") and current_scene:
            scenes.append(current_scene)
            current_scene = {}
        elif "–í–∏–∑—É–∞–ª:" in line:
            current_scene["visual"] = line.replace("–í–∏–∑—É–∞–ª:", "").strip()
        elif "–¢–µ–∫—Å—Ç:" in line:
            current_scene["text"] = line.replace("–¢–µ–∫—Å—Ç:", "").strip()
    if current_scene:
        scenes.append(current_scene)
    return [s for s in scenes if s.get("visual") and s.get("text")]

# === Gradio UI ===

with gr.Blocks(title="VideoGenius PRO") as demo:
    gr.Markdown("# üé¨ VideoGenius PRO\n### AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")

    with gr.Tab("–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"):
        topic = gr.Textbox(label="–¢–µ–º–∞ –≤–∏–¥–µ–æ", placeholder="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?")
        style = gr.Dropdown(
            label="–°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è",
            choices=["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–Ω–∞—É—á–Ω—ã–π", "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", "–¥–µ—Ç—Å–∫–∏–π", "–¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π"],
            value="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        )
        add_subtitles = gr.Checkbox(label="–î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã", value=True)
        btn = gr.Button("–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ üöÄ", variant="primary")
        status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å")
        video = gr.Video(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn.click(create_video_pipeline, [topic, style, add_subtitles], [status, video])

    with gr.Tab("–ò—Å—Ç–æ—Ä–∏—è"):
        def load_history_ui():
            history = load_history()
            return "\n".join([
                f"{h['id']}. {h['topic']} ({h['created_at'][:10]}) - {h['status']}"
                for h in history[-10:]
            ])
        history_display = gr.Textbox(label="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", lines=10)
        refresh_btn = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        refresh_btn.click(load_history_ui, None, history_display)

    with gr.Tab("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
        gr.Markdown("## üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")

        with gr.Tab("LLM (–¢–µ–∫—Å—Ç)"):
            llm_provider = gr.Radio(
                ["openai", "anthropic", "mistral"],
                label="–ü—Ä–æ–≤–∞–π–¥–µ—Ä",
                value=settings.current["llm_provider"]
            )
            openai_key = gr.Textbox(label="OpenAI API Key", type="password", value=settings.providers["llm"]["openai"])
            anthropic_key = gr.Textbox(label="Anthropic API Key", type="password", value=settings.providers["llm"]["anthropic"])
            mistral_key = gr.Textbox(label="Mistral API Key", type="password", value=settings.providers["llm"]["mistral"])
            llm_model = gr.Textbox(label="–ú–æ–¥–µ–ª—å", value=settings.current["llm_model"])
            save_llm = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            save_llm.click(
                lambda p, o, a, m, mdl: [
                    settings.save_provider_key("llm", "openai", o),
                    settings.save_provider_key("llm", "anthropic", a),
                    settings.save_provider_key("llm", "mistral", m),
                    settings.save_current_setting("llm_provider", p),
                    settings.save_current_setting("llm_model", mdl),
                    "‚úÖ LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                ][-1],
                [llm_provider, openai_key, anthropic_key, mistral_key, llm_model],
                gr.Textbox()
            )

        with gr.Tab("TTS (–û–∑–≤—É—á–∫–∞)"):
            tts_provider = gr.Radio(["elevenlabs", "playht"], label="–ü—Ä–æ–≤–∞–π–¥–µ—Ä", value=settings.current["tts_provider"])
            elevenlabs_key = gr.Textbox(label="ElevenLabs API Key", type="password", value=settings.providers["tts"]["elevenlabs"])
            playht_key = gr.Textbox(label="PlayHT API Key", type="password", value=settings.providers["tts"]["playht"])
            playht_user_id = gr.Textbox(label="PlayHT User ID", type="password", value=settings.providers["tts"]["playht_user_id"])
            tts_voice = gr.Textbox(label="–ì–æ–ª–æ—Å (ID –∏–ª–∏ –∏–º—è)", value=settings.current["tts_voice"])
            save_tts = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            save_tts.click(
                lambda p, e, ph, uid, v: [
                    settings.save_provider_key("tts", "elevenlabs", e),
                    settings.save_provider_key("tts", "playht", ph),
                    settings.save_provider_key("tts", "playht", uid) if uid else None,
                    settings.save_current_setting("tts_provider", p),
                    settings.save_current_setting("tts_voice", v),
                    "‚úÖ TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                ][-1],
                [tts_provider, elevenlabs_key, playht_key, playht_user_id, tts_voice],
                gr.Textbox()
            )

        with gr.Tab("–ú–µ–¥–∏–∞ (–í–∏–¥–µ–æ/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"):
            media_provider = gr.Radio(["pexels", "unsplash", "openai"], label="–ü—Ä–æ–≤–∞–π–¥–µ—Ä", value=settings.current["media_provider"])
            pexels_key = gr.Textbox(label="Pexels API Key", type="password", value=settings.providers["media"]["pexels"])
            unsplash_key = gr.Textbox(label="Unsplash Access Key", type="password", value=settings.providers["media"]["unsplash"])
            dalle_key = gr.Textbox(label="OpenAI API Key (–¥–ª—è DALL¬∑E)", type="password", value=settings.providers["media"]["openai"])
            save_media = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–¥–∏–∞-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            save_media.click(
                lambda p, px, us, d: [
                    settings.save_provider_key("media", "pexels", px),
                    settings.save_provider_key("media", "unsplash", us),
                    settings.save_provider_key("media", "openai", d),
                    settings.save_current_setting("media_provider", p),
                    "‚úÖ –ú–µ–¥–∏–∞-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                ][-1],
                [media_provider, pexels_key, unsplash_key, dalle_key],
                gr.Textbox()
            )

demo.launch(server_name="0.0.0.0", server_port=7860, share=True)
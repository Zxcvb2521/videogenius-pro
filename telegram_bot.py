import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from app import generate_video_pipeline  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è MVP)
user_tasks = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø VideoGenius AI Agent.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É ‚Äî —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –Ω–∞ YouTube!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = update.message.text
    user_id = update.message.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º: —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ / –≤–∏–¥–µ–æ + YouTube
    keyboard = [
        [
            InlineKeyboardButton("üé• –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ", callback_data=f"video_only|{topic}"),
            InlineKeyboardButton("üì∫ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ YouTube", callback_data=f"youtube|{topic}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'–¢–µ–º–∞: "{topic}"\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    action = data[0]
    topic = data[1]
    user_id = query.from_user.id

    await query.edit_message_text(text=f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ:\n\n¬´{topic}¬ª...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    try:
        status = ""
        video_path = None
        async for status, video_path in generate_video_pipeline(topic, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", True):
            if video_path:
                break
            else:
                await query.edit_message_text(text=status)

        if not video_path or not os.path.exists(video_path):
            await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ.")
            return

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ"
        if action == "video_only":
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=open(video_path, 'rb'),
                caption=f"‚úÖ –í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª –≥–æ—Ç–æ–≤–æ!"
            )
            await query.edit_message_text(text="–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ YouTube"
        elif action == "youtube":
            await query.edit_message_text(text="üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –Ω–∞ YouTube...")
            try:
                youtube_url = upload_to_youtube(video_path, topic)
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚úÖ –í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube!\n\n{youtube_url}"
                )
            except Exception as e:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ YouTube:\n{str(e)}"
                )
                await context.bot.send_video(
                    chat_id=query.message.chat_id,
                    video=open(video_path, 'rb'),
                    caption="üé• –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ:"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def upload_to_youtube(video_path: str, title: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ YouTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload
    from google.oauth2.credentials import Credentials

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YouTube API
    SCOPES = ['https://www.googleapis.com/auth/youtube.upload']
    API_SERVICE_NAME = 'youtube'
    API_VERSION = 'v3'
    CLIENT_SECRETS_FILE = 'client_secret.json'  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    TOKEN_FILE = 'token.json'

    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)

    if not creds:
        raise Exception("YouTube API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")

    youtube = build(API_SERVICE_NAME, API_VERSION, credentials=creds)

    request_body = {
        'snippet': {
            'title': title[:100],
            'description': f'–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ AI –ø–æ —Ç–µ–º–µ: {title}',
            'tags': ['AI', 'VideoGenius', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
            'categoryId': '27'  # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        },
        'status': {
            'privacyStatus': 'public',  # –∏–ª–∏ 'private', 'unlisted'
            'selfDeclaredMadeForKids': False
        }
    }

    media = MediaFileUpload(video_path, chunksize=-1, resumable=True)
    request = youtube.videos().insert(
        part="snippet,status",
        body=request_body,
        media_body=media
    )

    response = None
    while response is None:
        status, response = request.next_chunk()

    video_id = response['id']
    return f"https://youtu.be/{video_id}"

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()